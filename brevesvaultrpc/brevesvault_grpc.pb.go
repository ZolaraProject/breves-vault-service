// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: brevesvault.proto

package brevesvaultrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrevesVaultService_GetUserVideos_FullMethodName   = "/brevesvaultrpc.brevesVaultService/GetUserVideos"
	BrevesVaultService_CreateVideo_FullMethodName     = "/brevesvaultrpc.brevesVaultService/CreateVideo"
	BrevesVaultService_LikeVideo_FullMethodName       = "/brevesvaultrpc.brevesVaultService/LikeVideo"
	BrevesVaultService_UpdateUserVideo_FullMethodName = "/brevesvaultrpc.brevesVaultService/UpdateUserVideo"
)

// BrevesVaultServiceClient is the client API for BrevesVaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrevesVaultServiceClient interface {
	GetUserVideos(ctx context.Context, in *UserVideoRequest, opts ...grpc.CallOption) (*UserVideoList, error)
	CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateUserVideo(ctx context.Context, in *UpdateUserVideoRequest, opts ...grpc.CallOption) (*UserVideoList, error)
}

type brevesVaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrevesVaultServiceClient(cc grpc.ClientConnInterface) BrevesVaultServiceClient {
	return &brevesVaultServiceClient{cc}
}

func (c *brevesVaultServiceClient) GetUserVideos(ctx context.Context, in *UserVideoRequest, opts ...grpc.CallOption) (*UserVideoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserVideoList)
	err := c.cc.Invoke(ctx, BrevesVaultService_GetUserVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brevesVaultServiceClient) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, BrevesVaultService_CreateVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brevesVaultServiceClient) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, BrevesVaultService_LikeVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brevesVaultServiceClient) UpdateUserVideo(ctx context.Context, in *UpdateUserVideoRequest, opts ...grpc.CallOption) (*UserVideoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserVideoList)
	err := c.cc.Invoke(ctx, BrevesVaultService_UpdateUserVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrevesVaultServiceServer is the server API for BrevesVaultService service.
// All implementations must embed UnimplementedBrevesVaultServiceServer
// for forward compatibility.
type BrevesVaultServiceServer interface {
	GetUserVideos(context.Context, *UserVideoRequest) (*UserVideoList, error)
	CreateVideo(context.Context, *CreateVideoRequest) (*CreateResponse, error)
	LikeVideo(context.Context, *LikeVideoRequest) (*CreateResponse, error)
	UpdateUserVideo(context.Context, *UpdateUserVideoRequest) (*UserVideoList, error)
	mustEmbedUnimplementedBrevesVaultServiceServer()
}

// UnimplementedBrevesVaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrevesVaultServiceServer struct{}

func (UnimplementedBrevesVaultServiceServer) GetUserVideos(context.Context, *UserVideoRequest) (*UserVideoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideos not implemented")
}
func (UnimplementedBrevesVaultServiceServer) CreateVideo(context.Context, *CreateVideoRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedBrevesVaultServiceServer) LikeVideo(context.Context, *LikeVideoRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedBrevesVaultServiceServer) UpdateUserVideo(context.Context, *UpdateUserVideoRequest) (*UserVideoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVideo not implemented")
}
func (UnimplementedBrevesVaultServiceServer) mustEmbedUnimplementedBrevesVaultServiceServer() {}
func (UnimplementedBrevesVaultServiceServer) testEmbeddedByValue()                            {}

// UnsafeBrevesVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrevesVaultServiceServer will
// result in compilation errors.
type UnsafeBrevesVaultServiceServer interface {
	mustEmbedUnimplementedBrevesVaultServiceServer()
}

func RegisterBrevesVaultServiceServer(s grpc.ServiceRegistrar, srv BrevesVaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrevesVaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrevesVaultService_ServiceDesc, srv)
}

func _BrevesVaultService_GetUserVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrevesVaultServiceServer).GetUserVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrevesVaultService_GetUserVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrevesVaultServiceServer).GetUserVideos(ctx, req.(*UserVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrevesVaultService_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrevesVaultServiceServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrevesVaultService_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrevesVaultServiceServer).CreateVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrevesVaultService_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrevesVaultServiceServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrevesVaultService_LikeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrevesVaultServiceServer).LikeVideo(ctx, req.(*LikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrevesVaultService_UpdateUserVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrevesVaultServiceServer).UpdateUserVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrevesVaultService_UpdateUserVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrevesVaultServiceServer).UpdateUserVideo(ctx, req.(*UpdateUserVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrevesVaultService_ServiceDesc is the grpc.ServiceDesc for BrevesVaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrevesVaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brevesvaultrpc.brevesVaultService",
	HandlerType: (*BrevesVaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserVideos",
			Handler:    _BrevesVaultService_GetUserVideos_Handler,
		},
		{
			MethodName: "CreateVideo",
			Handler:    _BrevesVaultService_CreateVideo_Handler,
		},
		{
			MethodName: "LikeVideo",
			Handler:    _BrevesVaultService_LikeVideo_Handler,
		},
		{
			MethodName: "UpdateUserVideo",
			Handler:    _BrevesVaultService_UpdateUserVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brevesvault.proto",
}
